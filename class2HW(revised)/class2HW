package main

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"net/http"
)

type Todo struct {
	ID   uint   `json:"id" gorm:"primaryKey"`
	Todo string `json:"todo"`
	Done bool   `json:"done"`
}

var db *gorm.DB

// 初始化數據庫
func initDB() {
	var err error
	db, err = gorm.Open(sqlite.Open("todos.db"), &gorm.Config{})
	if err != nil {
		panic("無法連接到數據庫！")
	}
	db.AutoMigrate(&Todo{})
}

// 添加Todo
func addTodoHandler(c *gin.Context) {
	todo := c.Query("todo")
	if todo == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "缺少Todo參數。"})
		return
	}

	newTodo := Todo{Todo: todo, Done: false}
	db.Create(&newTodo)

	c.JSON(http.StatusOK, newTodo)
}

// 讀取Todo列表
func readTodosHandler(c *gin.Context) {
	var todos []Todo
	state := c.Query("state")

	if state == "done" {
		db.Where("done = ?", true).Find(&todos)
	} else if state == "pending" {
		db.Where("done = ?", false).Find(&todos)
	} else {
		db.Find(&todos)
	}

	c.JSON(http.StatusOK, gin.H{"todos": todos})
}

// 改變Todo狀態並顯示所有Todo
func markTodoHandler(c *gin.Context) {
	var todo Todo
	id := c.Query("id")

	if err := db.First(&todo, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "未找到Todo。"})
		return
	}

	state := c.Query("state")
	if state == "done" {
		todo.Done = true
	} else if state == "pending" {
		todo.Done = false
	}
	db.Save(&todo)

	// 顯示所有待辦事項
	var todos []Todo
	db.Find(&todos)
	c.JSON(http.StatusOK, gin.H{"todos": todos})
}

// 刪除Todo項目
func removeTodoHandler(c *gin.Context) {
	id := c.Query("id")
	if err := db.Delete(&Todo{}, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "未找到Todo。"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "Todo已成功刪除。"})
}

func class02_HW() {
	initDB()
	r := gin.Default()
	api := r.Group("/api")

	api.POST("/todo", addTodoHandler)        // 添加Todo
	api.GET("/read", readTodosHandler)       // 讀取Todo列表
	api.POST("/mark", markTodoHandler)       // 改變Todo狀態
	api.DELETE("/remove", removeTodoHandler) // 刪除Todo

	if err := r.Run(":8081"); err != nil {
		fmt.Printf("啟動服務器失敗: %s\n", err)
	} else {
		fmt.Println("服務器運行在端口8081上")
	}
}

func main() {
	class02_HW()
}
